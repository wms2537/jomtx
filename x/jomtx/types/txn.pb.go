// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: jomtx/jomtx/txn.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Txn struct {
	Id        uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InvoiceNo string   `protobuf:"bytes,2,opt,name=invoiceNo,proto3" json:"invoiceNo,omitempty"`
	Proofs    []string `protobuf:"bytes,3,rep,name=proofs,proto3" json:"proofs,omitempty"`
	Items     string   `protobuf:"bytes,4,opt,name=items,proto3" json:"items,omitempty"`
	Remarks   string   `protobuf:"bytes,5,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Files     []string `protobuf:"bytes,6,rep,name=files,proto3" json:"files,omitempty"`
	Creator   string   `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	Customer  string   `protobuf:"bytes,8,opt,name=customer,proto3" json:"customer,omitempty"`
	Total     uint64   `protobuf:"varint,9,opt,name=total,proto3" json:"total,omitempty"`
	Currency  string   `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	Decimals  uint32   `protobuf:"varint,11,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (m *Txn) Reset()         { *m = Txn{} }
func (m *Txn) String() string { return proto.CompactTextString(m) }
func (*Txn) ProtoMessage()    {}
func (*Txn) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e1dca766e541e53, []int{0}
}
func (m *Txn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Txn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Txn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Txn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Txn.Merge(m, src)
}
func (m *Txn) XXX_Size() int {
	return m.Size()
}
func (m *Txn) XXX_DiscardUnknown() {
	xxx_messageInfo_Txn.DiscardUnknown(m)
}

var xxx_messageInfo_Txn proto.InternalMessageInfo

func (m *Txn) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Txn) GetInvoiceNo() string {
	if m != nil {
		return m.InvoiceNo
	}
	return ""
}

func (m *Txn) GetProofs() []string {
	if m != nil {
		return m.Proofs
	}
	return nil
}

func (m *Txn) GetItems() string {
	if m != nil {
		return m.Items
	}
	return ""
}

func (m *Txn) GetRemarks() string {
	if m != nil {
		return m.Remarks
	}
	return ""
}

func (m *Txn) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *Txn) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Txn) GetCustomer() string {
	if m != nil {
		return m.Customer
	}
	return ""
}

func (m *Txn) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Txn) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Txn) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func init() {
	proto.RegisterType((*Txn)(nil), "jomtx.jomtx.Txn")
}

func init() { proto.RegisterFile("jomtx/jomtx/txn.proto", fileDescriptor_4e1dca766e541e53) }

var fileDescriptor_4e1dca766e541e53 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xc1, 0x4a, 0xf4, 0x30,
	0x14, 0x85, 0x27, 0x9d, 0x99, 0xce, 0x34, 0xc3, 0xff, 0x2f, 0x82, 0xca, 0x45, 0x24, 0x14, 0x41,
	0xe8, 0xaa, 0x2e, 0x7c, 0x00, 0xc1, 0x07, 0x70, 0x51, 0x5c, 0xb9, 0xeb, 0xa4, 0x19, 0x8d, 0x36,
	0x4d, 0x49, 0x52, 0xe9, 0xf8, 0x14, 0x6e, 0x7c, 0x27, 0x97, 0xb3, 0x74, 0x29, 0xed, 0x8b, 0x48,
	0x93, 0x4e, 0xdd, 0x5c, 0xf8, 0xce, 0x3d, 0xe7, 0xc2, 0x3d, 0xf8, 0xf4, 0x45, 0x49, 0xdb, 0x5e,
	0xfb, 0x69, 0xdb, 0x2a, 0xad, 0xb5, 0xb2, 0x8a, 0x6c, 0x9c, 0x90, 0xba, 0x79, 0xf9, 0x19, 0xe0,
	0xf9, 0x43, 0x5b, 0x91, 0xff, 0x38, 0x10, 0x05, 0xa0, 0x18, 0x25, 0x8b, 0x2c, 0x10, 0x05, 0xb9,
	0xc0, 0x91, 0xa8, 0xde, 0x94, 0x60, 0xfc, 0x5e, 0x41, 0x10, 0xa3, 0x24, 0xca, 0xfe, 0x04, 0x72,
	0x86, 0xc3, 0x5a, 0x2b, 0xb5, 0x33, 0x30, 0x8f, 0xe7, 0x49, 0x94, 0x8d, 0x44, 0x4e, 0xf0, 0x52,
	0x58, 0x2e, 0x0d, 0x2c, 0x5c, 0xc2, 0x03, 0x01, 0xbc, 0xd2, 0x5c, 0xe6, 0xfa, 0xd5, 0xc0, 0xd2,
	0xe9, 0x47, 0x1c, 0xfc, 0x3b, 0x51, 0x72, 0x03, 0xa1, 0x3b, 0xe3, 0x61, 0xf0, 0x33, 0xcd, 0x73,
	0xab, 0x34, 0xac, 0xbc, 0x7f, 0x44, 0x72, 0x8e, 0xd7, 0xac, 0x31, 0x56, 0x49, 0xae, 0x61, 0xed,
	0x56, 0x13, 0x0f, 0xb7, 0xac, 0xb2, 0x79, 0x09, 0x91, 0x7b, 0xc2, 0x83, 0x4f, 0x68, 0xcd, 0x2b,
	0xb6, 0x07, 0x7c, 0x4c, 0x78, 0x1e, 0x76, 0x05, 0x67, 0x42, 0xe6, 0xa5, 0x81, 0x4d, 0x8c, 0x92,
	0x7f, 0xd9, 0xc4, 0x77, 0xb7, 0x5f, 0x1d, 0x45, 0x87, 0x8e, 0xa2, 0x9f, 0x8e, 0xa2, 0x8f, 0x9e,
	0xce, 0x0e, 0x3d, 0x9d, 0x7d, 0xf7, 0x74, 0xf6, 0x78, 0xf5, 0x24, 0xec, 0x73, 0xb3, 0x4d, 0x99,
	0x92, 0x43, 0xb5, 0x65, 0xf3, 0x3e, 0x36, 0x3c, 0x35, 0xbd, 0xaf, 0xb9, 0xd9, 0x86, 0xae, 0xec,
	0x9b, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x35, 0x91, 0xcf, 0x31, 0x85, 0x01, 0x00, 0x00,
}

func (m *Txn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Txn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Txn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Decimals != 0 {
		i = encodeVarintTxn(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintTxn(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x52
	}
	if m.Total != 0 {
		i = encodeVarintTxn(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Customer) > 0 {
		i -= len(m.Customer)
		copy(dAtA[i:], m.Customer)
		i = encodeVarintTxn(dAtA, i, uint64(len(m.Customer)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTxn(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Files[iNdEx])
			copy(dAtA[i:], m.Files[iNdEx])
			i = encodeVarintTxn(dAtA, i, uint64(len(m.Files[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Remarks) > 0 {
		i -= len(m.Remarks)
		copy(dAtA[i:], m.Remarks)
		i = encodeVarintTxn(dAtA, i, uint64(len(m.Remarks)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Items) > 0 {
		i -= len(m.Items)
		copy(dAtA[i:], m.Items)
		i = encodeVarintTxn(dAtA, i, uint64(len(m.Items)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Proofs) > 0 {
		for iNdEx := len(m.Proofs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proofs[iNdEx])
			copy(dAtA[i:], m.Proofs[iNdEx])
			i = encodeVarintTxn(dAtA, i, uint64(len(m.Proofs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.InvoiceNo) > 0 {
		i -= len(m.InvoiceNo)
		copy(dAtA[i:], m.InvoiceNo)
		i = encodeVarintTxn(dAtA, i, uint64(len(m.InvoiceNo)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTxn(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxn(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxn(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Txn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTxn(uint64(m.Id))
	}
	l = len(m.InvoiceNo)
	if l > 0 {
		n += 1 + l + sovTxn(uint64(l))
	}
	if len(m.Proofs) > 0 {
		for _, s := range m.Proofs {
			l = len(s)
			n += 1 + l + sovTxn(uint64(l))
		}
	}
	l = len(m.Items)
	if l > 0 {
		n += 1 + l + sovTxn(uint64(l))
	}
	l = len(m.Remarks)
	if l > 0 {
		n += 1 + l + sovTxn(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, s := range m.Files {
			l = len(s)
			n += 1 + l + sovTxn(uint64(l))
		}
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTxn(uint64(l))
	}
	l = len(m.Customer)
	if l > 0 {
		n += 1 + l + sovTxn(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovTxn(uint64(m.Total))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovTxn(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovTxn(uint64(m.Decimals))
	}
	return n
}

func sovTxn(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxn(x uint64) (n int) {
	return sovTxn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Txn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Txn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Txn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proofs = append(m.Proofs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remarks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remarks = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Customer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxn
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxn
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxn
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxn        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxn          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxn = fmt.Errorf("proto: unexpected end of group")
)
